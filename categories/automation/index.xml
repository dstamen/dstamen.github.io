<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Automation on davidstamen.com</title><link>https://davidstamen.com/categories/automation/</link><description>Recent content in Automation on davidstamen.com</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 16 Apr 2020 08:30:00 +0000</lastBuildDate><atom:link href="https://davidstamen.com/categories/automation/index.xml" rel="self" type="application/rss+xml"/><item><title>Using PowerCLI to Deploy the Site Recovery Manager 8.3 Appliance</title><link>https://davidstamen.com/2020/04/16/using-powercli-to-deploy-the-site-recovery-manager-8.3-appliance/</link><pubDate>Thu, 16 Apr 2020 08:30:00 +0000</pubDate><guid>https://davidstamen.com/2020/04/16/using-powercli-to-deploy-the-site-recovery-manager-8.3-appliance/</guid><description>My latest project was to rebuild one of my labs to run vSphere 7 and Site Recovery Manager 8.3. In my current role I am constantly am deploying new lab environments for certain demos. If i can avoid using a manual process for it I will, in this case I am showing how you can deploy the SRM OVF using PowerCLI.
Pre-Requsites VMware PowerCLI Link to Script deploy-srm83.</description></item><item><title>Using Ansible to Run Powershell Scripts</title><link>https://davidstamen.com/2016/02/04/using-ansible-to-run-powershell-scripts/</link><pubDate>Thu, 04 Feb 2016 00:00:00 +0000</pubDate><guid>https://davidstamen.com/2016/02/04/using-ansible-to-run-powershell-scripts/</guid><description>In the midst of playing with Ansible and figured my most common use case would be executing powershell scripts on remote servers, so scavenged around and put this together.
Pre-Requsites ansible ansible-winrm Link to Git Project ansible_powershell Preparing to Execute the Script This script assumes you have already installed and configured Ansible, downloaded the Git Repo and installed the WinRM python module.
Define your group variables.</description></item><item><title>Using Ansible to Create Cisco ACI Filters</title><link>https://davidstamen.com/2016/02/03/using-ansible-to-create-cisco-aci-filters/</link><pubDate>Wed, 03 Feb 2016 00:00:00 +0000</pubDate><guid>https://davidstamen.com/2016/02/03/using-ansible-to-create-cisco-aci-filters/</guid><description>In the midst of rolling out Cisco ACI, we have a need to automation creation of filters to apply to contracts. I tried to use the ACI-PowerTool for this task, however it doesnt seem to work with the newer code we are on. So I went back and attempted to use the ansible modules and it worked flawlessly, below is a sample playbook that will create a filter and add the associated filter entries.</description></item><item><title>Using Vagrant to Deploy an Ubuntu Server running KVM</title><link>https://davidstamen.com/2015/10/12/using-vagrant-to-deploy-an-ubuntu-server-running-kvm/</link><pubDate>Mon, 12 Oct 2015 00:00:00 +0000</pubDate><guid>https://davidstamen.com/2015/10/12/using-vagrant-to-deploy-an-ubuntu-server-running-kvm/</guid><description>With all this talk about VMware vs KVM I figured that I would attempt to load a base install of KVM to see what it was all about.
Here is a quick vagrant runbook that will quickly get a 3 linux servers deployed and installed with KVM to play with.
There are 3 nodes..MGMT01,KVM01 and KVM02. I use MGMT01 VMM to manage KVM01 and KVM02.
The code can be found here.</description></item><item><title>Using Vagrant to Deploy a 2012R2 DHCP Failover Cluster</title><link>https://davidstamen.com/2015/10/01/using-vagrant-to-deploy-a-2012r2-dhcp-failover-cluster/</link><pubDate>Thu, 01 Oct 2015 00:00:00 +0000</pubDate><guid>https://davidstamen.com/2015/10/01/using-vagrant-to-deploy-a-2012r2-dhcp-failover-cluster/</guid><description>So I am in the process of rolling out a new 2012R2 DHCP Server Cluster, and I thought i would share my scripts with the community.
I have also rolled it into a Vagrant package so you can easily test it on your own, and execute the scripts by themselves against your environment to deploy.
Here is a link to the GitHub repository containing all the code.
The code is also fairly simple, it pulls in data from a few .</description></item><item><title>Using Vagrant to Deploy an Ubuntu Server running NGINX</title><link>https://davidstamen.com/2015/09/08/using-vagrant-to-deploy-an-ubuntu-server-running-nginx/</link><pubDate>Tue, 08 Sep 2015 00:00:00 +0000</pubDate><guid>https://davidstamen.com/2015/09/08/using-vagrant-to-deploy-an-ubuntu-server-running-nginx/</guid><description>So as I was getting around to trying to get a host platform setup for a Jekyll blog I was looking at an alternative to GitHub Pages. I decided I would run it on Ubuntu Server using NGINX as the web platform.
Here is a quick vagrant runbook that will quickly get a linux server deployed and install NGINX to host your website.
The code can be found here.
The bootstrap_linux_nginx.</description></item></channel></rss>