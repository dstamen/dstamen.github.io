<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Ansible on davidstamen</title><link>https://davidstamen.com/tags/ansible/</link><description>Recent content in Ansible on davidstamen</description><generator>Hugo</generator><language>en</language><copyright>Copyright © 2008–2018, Steve Francia and the Hugo Authors; all rights reserved.</copyright><lastBuildDate>Wed, 12 Aug 2020 08:00:00 +0000</lastBuildDate><atom:link href="https://davidstamen.com/tags/ansible/index.xml" rel="self" type="application/rss+xml"/><item><title>Using Ansible to Provision your Pure Storage Infrastructure</title><link>https://davidstamen.com/2020/08/12/using-ansible-to-provision-your-pure-storage-infrastructure/</link><pubDate>Wed, 12 Aug 2020 08:00:00 +0000</pubDate><guid>https://davidstamen.com/2020/08/12/using-ansible-to-provision-your-pure-storage-infrastructure/</guid><description>&lt;p&gt;I mentioned previously that there are many things I love about the Pure Storage Flasharray, but one of my favorite is how easy it is to integrate into different automation solutions. In this blog I will cover how to use Ansible to provision your Pure Storage Infrastructure.&lt;/p&gt;</description></item><item><title>Using Ansible to Run Powershell Scripts</title><link>https://davidstamen.com/2016/02/04/using-ansible-to-run-powershell-scripts/</link><pubDate>Thu, 04 Feb 2016 00:00:00 +0000</pubDate><guid>https://davidstamen.com/2016/02/04/using-ansible-to-run-powershell-scripts/</guid><description>&lt;p&gt;In the midst of playing with Ansible and figured my most common use case would be executing powershell scripts on remote servers, so scavenged around and put this together.&lt;/p&gt;
&lt;h4 id="pre-requsites"&gt;&lt;em&gt;&lt;strong&gt;Pre-Requsites&lt;/strong&gt;&lt;/em&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://docs.ansible.com/ansible/intro_installation.html"&gt;ansible&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://github.com/diyan/pywinrm/archive/master.zip#egg=pywinrm"&gt;ansible-winrm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="link-to-git-project"&gt;&lt;em&gt;&lt;strong&gt;Link to Git Project&lt;/strong&gt;&lt;/em&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dstamen/Ansible/tree/master/ansible_powershell"&gt;ansible_powershell&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="preparing-to-execute-the-script"&gt;&lt;em&gt;&lt;strong&gt;Preparing to Execute the Script&lt;/strong&gt;&lt;/em&gt;&lt;/h4&gt;
&lt;p&gt;&lt;em&gt;This script assumes you have already installed and configured Ansible, downloaded the Git Repo and installed the WinRM python module.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Define your group variables. Create a hostgroup.yml file in this folder. This is where you specify the username, password and WinRM port to use. This file should mimit the host group defined in your hosts file.&lt;/p&gt;</description></item><item><title>Using Ansible to Create Cisco ACI Filters</title><link>https://davidstamen.com/2016/02/03/using-ansible-to-create-cisco-aci-filters/</link><pubDate>Wed, 03 Feb 2016 00:00:00 +0000</pubDate><guid>https://davidstamen.com/2016/02/03/using-ansible-to-create-cisco-aci-filters/</guid><description>&lt;p&gt;In the midst of rolling out Cisco ACI, we have a need to automation creation of filters to apply to contracts. I tried to use the ACI-PowerTool for this task, however it doesnt seem to work with the newer code we are on. So I went back and attempted to use the ansible modules and it worked flawlessly, below is a sample playbook that will create a filter and add the associated filter entries. The below example are the required ports for Horizon View.&lt;/p&gt;</description></item></channel></rss>